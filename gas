/*******************************
 * ========== KONFIG ===========
 *******************************/
const SECRET = 'x7#9F!pL2*KqZ$8nW5vR@dY3sG6%hJ4&'; // ganti di produksi
const SHEETS = {
  USERS:'Users', VEH:'Vehicles', DRV:'Drivers',
  TL:'TaskLetters', CASH:'CashOps',
  ORD:'Orders', OGU:'OrderGuests',
  CFG:'Config', LOG:'AuditLog'
};

// === DEBUG / CCTV: kembalikan snapshot state untuk inspeksi ===
function debugState(req){
  var orderId    = (req && req.orderId)    || '';
  var driverUser = (req && req.driverUser) || '';
  var out = { order:null, guests:[], drivers:[], vehicles:[], myTasks:[], mapping:{} };

  // -- snapshot order + tamu + entitas terkait --
  if (orderId) {
    var ordRows = rows_(SH(SHEETS.ORD));
    out.order  = ordRows.find(function(o){ return o.id===orderId; }) || null;

    var ogu = rows_(SH(SHEETS.OGU)).filter(function(g){ return g.orderId===orderId; });
    out.guests = ogu;

    var vehIds = Array.from(new Set(ogu.map(function(g){ return g.vehicleId; }).filter(Boolean)));
    var drvIds = Array.from(new Set(ogu.map(function(g){ return g.driverId;  }).filter(Boolean)));

    var vehRows = rows_(SH(SHEETS.VEH));
    var drvRows = rows_(SH(SHEETS.DRV));
    out.vehicles = vehRows.filter(function(v){ return vehIds.indexOf(v.id) >= 0; });
    out.drivers  = drvRows.filter(function(d){ return drvIds.indexOf(d.id) >= 0; });
  }

  // -- mapping user -> driver (algoritma sama dgn myTasks) + daftar tugas driver tsb --
  if (driverUser) {
    function norm(s){ return (s||'').toString().trim().toLowerCase(); }
    function normalizePhone(s){
      s = (s||'').toString().trim().replace(/[^\d]/g,'');
      if (s.indexOf('0') === 0) s = '62' + s.slice(1);
      return s;
    }
    var drvRows = rows_(SH(SHEETS.DRV));
    var drv = drvRows.find(function(d){ return (d.userId||'') === driverUser; }) ||
              drvRows.find(function(d){ return norm(d.name) === norm(driverUser); }) ||
              drvRows.find(function(d){ return normalizePhone(d.wa) === normalizePhone(driverUser); }) || null;

    out.mapping = { inputUser: driverUser, matchedDrv: drv };

    if (drv) {
      var og  = rows_(SH(SHEETS.OGU)).filter(function(x){ return x.driverId===drv.id && isTrue_(x.approved); });
      var ord = rows_(SH(SHEETS.ORD));
      out.myTasks = og.map(function(x){
        var o = ord.find(function(k){ return k.id===x.orderId; }) || {};
        return {
          orderId:x.orderId, guestNo:+x.guestNo, nama:x.nama,
          asal:o.asal, tujuan:o.tujuan, berangkatISO:o.berangkatISO,
          approved:x.approved, departAt:x.departAt||'', arriveAt:x.arriveAt||'',
          vehicleId:x.vehicleId||'', driverId:x.driverId||''
        };
      });
    }
  }

  return out;
}

function doGet(e){
  ensureSheets_();

  // === JSONP endpoint (untuk fallback CORS) ===
  if (e && e.parameter && e.parameter.jsonp === '1') {
    var cb = e.parameter.cb || 'callback';

    try {
      // payload dikirim web-safe base64 di param "q"
      var payload = {};
      if (e.parameter.q) {
        var raw = Utilities.base64DecodeWebSafe(e.parameter.q);
        payload = JSON.parse(Utilities.newBlob(raw).getDataAsString() || '{}');
      }

      // tentukan action (ambil dari query atau dari payload)
      var action = e.parameter.action || payload.action || '';

      // routing sama seperti doPost
      var map = {
        login, ping,
        listVehicles, upsertVehicle, deleteVehicle,
        listDrivers, upsertDriver, deleteDriver,
        listUsers, upsertUser, deleteUser,
        getConfig, setConfig,
        createOrder, listApprovals, listAllocGuests, allocGuest, approveGuest, rejectOrder, deleteGuest, approveAll,
        myTasks, depart, arrive,
        journal, dashboard,
        // fitur kasir
        listCashierTasks, createTaskLetter, settleTaskLetter, listCashierJournal,
        // opsional debug kalau kamu punya
        debugState
      };
      var fn = map[action];
      if (!fn) {
        var txt404 = cb + '(' + JSON.stringify({ ok:false, error:'Unknown action' }) + ')';
        return ContentService.createTextOutput(txt404).setMimeType(ContentService.MimeType.JAVASCRIPT);
      }

      var out = fn(payload);
      var txt = cb + '(' + JSON.stringify({ ok:true, data: out }) + ')';
      return ContentService.createTextOutput(txt).setMimeType(ContentService.MimeType.JAVASCRIPT);

    } catch(err) {
      var errTxt = cb + '(' + JSON.stringify({ ok:false, error: String(err) }) + ')';
      return ContentService.createTextOutput(errTxt).setMimeType(ContentService.MimeType.JAVASCRIPT);
    }
  }

  // === halaman bridge lama (biarkan kalau kamu pakai) ===
  if (e && e.parameter && e.parameter.view === 'bridge') {
    var t = HtmlService.createTemplateFromFile('bridge');
    t.allowedOrigins = getAllowedOrigins_();
    return t.evaluate()
      .setTitle('GAS Bridge')
      .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
  }

    // ping sederhana (default)
  return json_({ ok:true, data: { ping:'ok' } });
}


/*******************************
 * ======== HTTP ENTRY =========
 *******************************/
function doPost(e){
  try{
    const req = JSON.parse(e.postData.contents||'{}');

    // Router: action -> handler
    const map = {
      // --- Auth ---
      login, ping,

      // --- Settings: Vehicles/Drivers/Users/Config ---
      listVehicles, upsertVehicle, deleteVehicle,
      listDrivers,  upsertDriver,  deleteDriver,
      listUsers,    upsertUser,    deleteUser,
      getConfig,    setConfig,

      // --- Order & Persetujuan ---
      createOrder, listApprovals, listAllocGuests,
      allocGuest, approveGuest, rejectOrder, deleteGuest, approveAll,

      // --- Driver (tugas) ---
      myTasks, depart, arrive,

      // --- Kasir ---
      listCashierTasks, createTaskLetter, settleTaskLetter, listCashierJournal,

      // --- Laporan & Dashboard ---
      journal, dashboard,

      debugState
    };

    ensureSheets_(); // pastikan struktur siap

    const fn = map[req.action];
    if(!fn) return json_({ ok:false, error:'Unknown action' });

    const out = fn(req);
    return json_({ ok:true, data: out });
  }catch(err){
    return json_({ ok:false, error: String(err) });
  }
}
function json_(obj){
  return ContentService.createTextOutput(JSON.stringify(obj))
    .setMimeType(ContentService.MimeType.JSON);
}

/****************************************
 * ===== UTIL (baca-tulis Spreadsheet) ==
 ****************************************/
const SH = name=>SpreadsheetApp.getActive().getSheetByName(name);

function rows_(sh){
  const v = sh.getDataRange().getValues();
  if (v.length < 2) return [];
  const h = v[0];
  return v.slice(1).map(r=>{
    const o={}; h.forEach((k,i)=>o[k]=r[i]); return o;
  });
}
function writeRows_(sh, rows, headers){
  const hdr = headers || Object.keys(rows[0]||{});
  sh.clearContents();
  sh.getRange(1,1,1,hdr.length).setValues([hdr]);
  if(rows.length){
    sh.getRange(2,1,rows.length,hdr.length)
      .setValues(rows.map(r=>hdr.map(k=>r[k]??'')));
  }
}
function uid_(){ return Math.random().toString(36).slice(2,10)+Math.random().toString(36).slice(2,10); }
function hash_(str){ const raw=Utilities.computeHmacSha256Signature(str, SECRET); return Utilities.base64Encode(raw); }
function nowISO_(){ return new Date().toISOString(); }

// Nilai "ya/true" robust untuk kolom approved, dst.
function isTrue_(v){
  if (v === true || v === 1) return true;
  if (typeof v === 'string') {
    var s = v.trim().toLowerCase();
    return s === 'true' || s === 'yes' || s === 'y' || s === '1' || s === 't' || s === 'ok';
  }
  return false;
}

/** Aktor pencatat log: dari token kalau ada, fallback req.actor, lalu 'system' */
function actor_(req){
  try{
    if (req && req.token){
      const t = parseToken_(req.token);
      return t.sub || 'system';
    }
  }catch(_){}
  return (req && req.actor) ? String(req.actor) : 'system';
}

/** Audit log ringkas */
function log_(req, action, detail){
  SH(SHEETS.LOG).appendRow([ new Date(), actor_(req), action||'', JSON.stringify(detail||{}) ]);
}

/****************************************
 * ========== FIRST RUN / SCHEMA ========
 ****************************************/
function ensureSheets_(){
  const lock = LockService.getScriptLock();
  lock.tryLock(20000);
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const EXPECT = {};
    EXPECT[SHEETS.USERS] = ['username','hash','role','tgId','token','tokenExp'];
    EXPECT[SHEETS.VEH]   = ['id','name','brand','plate','capacity','driverId','status','note'];
    EXPECT[SHEETS.DRV]   = ['id','name','wa','status','userId']; // userId: pengikat driver ke akun
    EXPECT[SHEETS.ORD]   = ['id','pemesanUser','pemesanNama','pemesanUnit','pemesanJabatan','asal','tujuan','berangkatISO','pulangISO','agenda','status'];
    EXPECT[SHEETS.OGU]   = ['orderId','guestNo','nama','unit','jabatan','gender','wa','vehicleId','driverId','approved','departAt','arriveAt'];
    EXPECT[SHEETS.CFG]   = ['key','value'];
    EXPECT[SHEETS.LOG]   = ['timestamp','user','action','detail'];
    EXPECT[SHEETS.TL]    = ['id','orderId','driverId','vehicleId','letterNo','createdAt','cashierUser','advanceAmount','settleAmount','status','note'];
    EXPECT[SHEETS.CASH]  = ['id','letterId','type','amount','note','at','by'];

    const ensure = (name, headers) => {
      let sh = ss.getSheetByName(name);
      if (!sh) {
        sh = ss.insertSheet();
        sh.setName(name);
        sh.getRange(1,1,1,headers.length).setValues([headers]);
        return sh;
      }
      const lastCol = Math.max(1, sh.getLastColumn());
      const h = sh.getRange(1,1,1,lastCol).getDisplayValues()[0].map(x=>x||'');
      headers.forEach(k=>{
        if(!h.includes(k)){
          const c=sh.getLastColumn()+1;
          sh.getRange(1,c).setValue(k);
        }
      });
      return sh;
    };

    Object.keys(EXPECT).forEach(n=>ensure(n, EXPECT[n]));

    // seed admin/master jika belum ada
    const u = rows_(SH(SHEETS.USERS));
    if(!u.find(x=>x.username==='admin'))  SH(SHEETS.USERS).appendRow(['admin',  hash_('admin:admin'),'admin','', '', '']);
    if(!u.find(x=>x.username==='master')) SH(SHEETS.USERS).appendRow(['master', hash_('master:master'),'master','', '', '']);
  } finally {
    lock.releaseLock();
  }
}

/****************************************
 * ========== AUTH (Login/Ping) =========
 ****************************************/
function login(req){
  const { username, password, remember } = req;
  const u = rows_(SH(SHEETS.USERS)).find(x=>x.username===username);
  if(!u) throw 'User tidak ditemukan';
  if(u.hash!==hash_(`${username}:${password}`)) throw 'Password salah';

  const token = makeToken_(username, u.role, remember);
  const sh=SH(SHEETS.USERS); const v=sh.getDataRange().getValues();
  for(let i=1;i<v.length;i++){
    if(v[i][0]===username){ v[i][4]=token.token; v[i][5]=token.expISO; break; }
  }
  sh.clearContents(); sh.getRange(1,1,v.length,v[0].length).setValues(v);

  log_(req,'login',{remember: !!remember});
  return { user:{ username, role:u.role, tgId:u.tgId||'' }, token: token.token };
}
function ping(req){
  const t = parseToken_(req.token);
  return { user:{ username:t.sub, role:t.role } };
}
function makeToken_(username, role, remember){
  const exp = new Date(); exp.setDate(exp.getDate() + (remember?30:1));
  const payload = { sub: username, role, exp: exp.getTime() };
  const base = Utilities.base64EncodeWebSafe(JSON.stringify(payload));
  const sig  = Utilities.base64EncodeWebSafe(Utilities.computeHmacSha256Signature(base, SECRET));
  return { token:`${base}.${sig}`, expISO:exp.toISOString() };
}
function parseToken_(token){
  if(!token) throw 'No token';
  const [base,sig] = token.split('.');
  const check = Utilities.base64EncodeWebSafe(Utilities.computeHmacSha256Signature(base, SECRET));
  if(check!==sig) throw 'Invalid token';
  const payload = JSON.parse(Utilities.newBlob(Utilities.base64DecodeWebSafe(base)).getDataAsString());
  if(Date.now()>payload.exp) throw 'Token expired';
  return payload;
}

/****************************************
 * ========== SETTINGS → CONFIG =========
 ****************************************/
function getConfig(_req){
  const m = rows_(SH(SHEETS.CFG)).reduce((a,r)=>{a[r.key]=r.value;return a;},{});
  return { tgBot:m.tgBot||'', tgAdmin:m.tgAdmin||'' };
}
function setConfig(req){
  const { tgBot, tgAdmin } = req.cfg||{};
  const map = { tgBot:tgBot||'', tgAdmin:tj(tgAdmin) };

  function tj(v){ return (v==null)?'':String(v); }

  writeRows_(SH(SHEETS.CFG),
    Object.keys(map).map(k=>({key:k, value:map[k]})),
    ['key','value']
  );
  log_(req,'setConfig',{});
  return true;
}

/****************************************
 * ========= SETTINGS → VEHICLES ========
 ****************************************/
function listVehicles(){
  const drv = rows_(SH(SHEETS.DRV));
  return rows_(SH(SHEETS.VEH)).map(v=>{
    const d = drv.find(x=>x.id===v.driverId)||{};
    return {
      id:v.id, name:v.name, brand:v.brand, plate:v.plate, capacity:+v.capacity||1,
      driverId:v.driverId||'', driverName:d.name||'', driverWa:d.wa||'',
      status:v.status||'available', note:v.note||''
    };
  });
}
function upsertVehicle(req){
  var v = (req && req.veh) ? req.veh : (req || {});
  if (v && v.veh) v = v.veh;

  if (!v.id) v.id = uid_();

  var sh   = SH(SHEETS.VEH);
  var rows = rows_(sh);
  var idx  = rows.findIndex(function(x){ return x.id === v.id; });

  var row = {
    id:       v.id,
    name:     v.name     || '',
    brand:    v.brand    || '',
    plate:    v.plate    || '',
    capacity: +v.capacity || 1,
    driverId: v.driverId || '',
    status:   v.status   || 'available',
    note:     v.note     || ''
  };

  if (idx < 0) rows.push(row); else rows[idx] = row;

  writeRows_(sh, rows, ['id','name','brand','plate','capacity','driverId','status','note']);
  log_(req,'upsertVehicle',{ id: v.id, driverId: row.driverId });
  return true;
}
function deleteVehicle(req){
  const id=req.id;
  const rows = rows_(SH(SHEETS.VEH)).filter(r=>r.id!==id);
  writeRows_(SH(SHEETS.VEH), rows, ['id','name','brand','plate','capacity','driverId','status','note']);
  log_(req,'deleteVehicle',{id});
  return true;
}

/****************************************
 * ========= SETTINGS → DRIVERS =========
 ****************************************/
function listDrivers(){ return rows_(SH(SHEETS.DRV)); }
function upsertDriver(req){
  // Terima payload flat atau double-wrap
  var d = (req && req.drv) ? req.drv : (req || {});
  if (d && d.drv) d = d.drv; // toleransi jika ada {drv:{...}} lagi

  if (!d.id) d.id = uid_();

  var sh   = SH(SHEETS.DRV);
  var rows = rows_(sh);
  var idx  = rows.findIndex(function(x){ return x.id === d.id; });

  var row = {
    id:      d.id,
    name:    d.name    || '',
    wa:      d.wa      || '',
    status:  d.status  || 'active',
    userId:  d.userId  || ''
  };

  if (idx < 0) rows.push(row); else rows[idx] = row;

  writeRows_(sh, rows, ['id','name','wa','status','userId']);
  log_(req,'upsertDriver',{ id: d.id, userId: row.userId });
  return true;
}

function deleteDriver(req){
  const id=req.id;
  const rows=rows_(SH(SHEETS.DRV)).filter(r=>r.id!==id);
  writeRows_(SH(SHEETS.DRV), rows, ['id','name','wa','status','userId']);
  log_(req,'deleteDriver',{id});
  return true;
}

/****************************************
 * ========= SETTINGS → USERS ===========
 ****************************************/
function listUsers(){
  return rows_(SH(SHEETS.USERS))
    .map(u=>({username:u.username, role:u.role, tgId:u.tgId||''}));
}
function upsertUser(req){
  var inRaw = (req && req.user) ? req.user : (req || {});
  if (inRaw && inRaw.user) inRaw = inRaw.user; // ⬅️ toleransi double wrap

  var username = String(inRaw.username || '').trim();
  var role     = (inRaw.role || 'user').trim();
  var tgId     = (inRaw.tgId == null ? '' : String(inRaw.tgId));
  var newPw    = (inRaw.newPassword || '');

  if (!username) throw 'Username wajib diisi';

  var sh   = SH(SHEETS.USERS);
  var rows = rows_(sh);

  var u = rows.find(function(x){ return x.username === username; });

  if (!u){
    u = {
      username: username,
      hash: hash_(username + ':' + (newPw || '1234')),
      role: role || 'user',
      tgId: tgId || '',
      token: '',
      tokenExp: ''
    };
    rows.push(u);
  }else{
    if (role)  u.role = role;
    if (tgId !== null && tgId !== undefined) u.tgId = tgId;
    if (newPw) u.hash = hash_(u.username + ':' + newPw);
  }

  writeRows_(sh, rows, ['username','hash','role','tgId','token','tokenExp']);
  log_(req,'upsertUser',{ username: username });
  return true;
}


function deleteUser(req){
  const username = req.username;
  if(username==='admin'||username==='master') throw 'Tidak boleh hapus user inti';
  const rows=rows_(SH(SHEETS.USERS)).filter(r=>r.username!==username);
  writeRows_(SH(SHEETS.USERS), rows, ['username','hash','role','tgId','token','tokenExp']);
  log_(req,'deleteUser',{username});
  return true;
}

/** =======================
 * TELEGRAM NOTIF CENTER
 * ======================= */

// alias untuk backward-compat (atasi error "telegram_is is not defined")
function telegram_is(text, chatId){ return telegram_(text, chatId); }
function currentUser_is(req){ return currentUser_(req); }

// Ikon/emoji per jenis notifikasi
const TG_ICONS = {
  order:   '📝',  // Order dibuat
  approval:'✅',  // Disetujui
  depart:  '🚗💨',// Berangkat
  arrive:  '🏁',  // Tiba
  reject:  '❌',  // Ditolak
  delete:  '🗑️', // Hapus tamu
};

// baca semua Users/Drivers/Vehicles/Orders/OGU sekali saat butuh
function _getAll_(){
  return {
    U: rows_(SH(SHEETS.USERS)),
    D: rows_(SH(SHEETS.DRV)),
    V: rows_(SH(SHEETS.VEH)),
    O: rows_(SH(SHEETS.ORD)),
    G: rows_(SH(SHEETS.OGU)),
  };
}

// util ambil user by username (untuk chat id)
function _findUser_(users, username){ return users.find(u=>u.username===username); }

// kirim ke daftar chat id (abaikan yang kosong)
function _tgBroadcast_(text, chatIds){
  (chatIds||[]).filter(Boolean).forEach(cid=>telegram_(text, cid));
}

// kirim ke semua role tertentu
function _tgToRoles_(users, roles, text){
  const ids = users
    .map(u => roles.includes(u.role) ? String(u.tgId == null ? '' : u.tgId).trim() : '')
    .filter(Boolean);

  if (ids.length) {
    _tgBroadcast_(text, ids);
  } else {
    // fallback: kirim ke tgAdmin jika belum ada user-role yg punya tgId
    const cfg = getConfig({});
    const admin = String(cfg.tgAdmin || '').trim();
    if (admin) telegram_(text, admin);
  }
}

// kirim ke pemesan order (kalau ada tgId)
function _tgToPemesan_(users, order, text){
  const u = _findUser_(users, order.pemesanUser || '');
  const cid = u ? String(u.tgId == null ? '' : u.tgId).trim() : '';
  if (cid) telegram_(text, cid);
}

// kirim ke driver tertentu (Driver.id → Users.username == driver.userId)
function _tgToDriverId_(users, drivers, driverId, text){
  const d = drivers.find(x => x.id === driverId);
  if (!d || !d.userId) return;
  const u = _findUser_(users, d.userId);
  const cid = u ? String(u.tgId == null ? '' : u.tgId).trim() : '';
  if (cid) telegram_(text, cid);
}

// ringkas tanggal
function _fmtLong(iso){ return fmtLong_(iso||''); }
function _fmtShort(iso){ return fmtShort_(iso||''); }

// daftar tamu (tanpa alokasi)
function _listGuestsBasic_(guests){
  if(!guests.length) return '—';
  return guests.map(g=>`• ${g.nama||'-'} (WA ${g.wa||'-'})`).join('\n');
}

// daftar tamu (dengan kendaraan & driver)
function _listGuestsAlloc_(guests, vehMap, drvMap){
  if(!guests.length) return '—';
  return guests.map(g=>{
    const v = vehMap[g.vehicleId] || {};
    const d = drvMap[g.driverId]  || {};
    const vLabel = v.name ? `Kend: ${v.name}` : 'Kend: -';
    const dLabel = d.name ? `Driver: ${d.name} (WA ${d.wa||'-'})` : 'Driver: -';
    return `• ${g.nama||'-'} (WA ${g.wa||'-'}) — ${vLabel} | ${dLabel}`;
  }).join('\n');
}

// kumpulkan konteks order (sekali panggil)
function _orderCtx_(orderId){
  const {U,D,V,O,G} = _getAll_();
  const o = O.find(x=>x.id===orderId) || {};
  const g = G.filter(x=>x.orderId===orderId);
  // map cepat
  const vehMap = V.reduce((a,v)=>{a[v.id]=v;return a;},{});
  const drvMap = D.reduce((a,d)=>{a[d.id]=d;return a;},{});
  return {U,D,V,O,G, o, g, vehMap, drvMap};
}

/* =========== NOTIF PER KEJADIAN =========== */

// 1) ORDER BARU → master/admin + pemesan
function notifyOrderCreated_(orderId){
  const {U,o,g} = _orderCtx_(orderId);
  const text =
`${TG_ICONS.order} ORDER BARU ${orderId}
Pemesan : ${o.pemesanNama||'-'} (${o.pemesanUnit||'-'})
Jml Tamu: ${g.length}
Rute    : ${o.asal||''} → ${o.tujuan||''}
Rencana : ${_fmtLong(o.berangkatISO)}
Agenda  : ${o.agenda||'-'}

Tamu:
${_listGuestsBasic_(g)}`;
  _tgToRoles_(U, ['master','admin'], text);
  _tgToPemesan_(U, o, text);
}

// 2) APPROVAL → master/admin + pemesan + cashier; driver per kelompok tamu
// guestNos: array guestNo yg disetujui (boleh null/undefined → pakai SEMUA approved)
function notifyApprovedGuests_(orderId, guestNos){
  const {U,D,o,g, vehMap, drvMap} = _orderCtx_(orderId);

  // Semua tamu yang SUDAH approved (rekap untuk admin/pemesan/cashier)
  const approvedAll = g.filter(x => x.approved === 'TRUE');

  // Target “baru di-approve” (untuk pesan spesifik ke driver)
  const targets = (guestNos && guestNos.length)
  ? g.filter(x => guestNos.includes(+x.guestNo))
  : g.filter(x => isTrue_(x.approved));

  // === Ringkasan untuk admin/pemesan/cashier: tampilkan SEMUA yang sudah approved ===
  const textAll =
`${TG_ICONS.approval} APPROVAL Order ${orderId}
Disetujui: ${approvedAll.length} dari ${g.length} tamu
Rute     : ${o.asal||''} → ${o.tujuan||''}
Rencana  : ${_fmtLong(o.berangkatISO)}

Tamu (alokasi disetujui):
${_listGuestsAlloc_(approvedAll, vehMap, drvMap)}`;

  _tgToRoles_(U, ['master','admin'], textAll);
  _tgToPemesan_(U, o, textAll);
  _tgToRoles_(U, ['cashier'], textAll);

  // === Notif ke masing-masing driver: hanya tampilkan tamu miliknya yang termasuk "targets" ===
  const byDrv = {};
  targets.forEach(function(t){
    if (!t.driverId) return;
    if (!byDrv[t.driverId]) byDrv[t.driverId] = [];
    byDrv[t.driverId].push(t);
  });

  Object.keys(byDrv).forEach(function(did){
    const list = byDrv[did];
    const tDrv =
`${TG_ICONS.approval} APPROVAL TUGAS
Order   : ${orderId}
Rute    : ${o.asal||''} → ${o.tujuan||''}
Rencana : ${_fmtLong(o.berangkatISO)}

Tamu Anda (baru disetujui):
${_listGuestsAlloc_(list, vehMap, drvMap)}`;
    _tgToDriverId_(U, D, did, tDrv);
  });
}

// 3) BERANGKAT → master/admin + pemesan + cashier + driver (hanya miliknya)
function notifyDepart_(orderId, guestNo){
  const {U,D,o,g, vehMap, drvMap} = _orderCtx_(orderId);
  const row = g.find(x=>+x.guestNo===+guestNo) || {};
  const text =
`${TG_ICONS.depart} BERANGKAT — Order ${orderId}
Jml Tamu: ${g.length}
Rute    : ${o.asal||''} → ${o.tujuan||''}
Aktual  : ${_fmtShort(row.departAt || new Date().toISOString())}

Tamu (alokasi):
${_listGuestsAlloc_(g, vehMap, drvMap)}`;

  _tgToRoles_(U, ['master','admin'], text);
  _tgToPemesan_(U, o, text);
  _tgToRoles_(U, ['cashier'], text);

  if(row.driverId) _tgToDriverId_(U, D, row.driverId, text);
}

// 4) TIBA → master/admin + pemesan + cashier + driver (hanya miliknya)
function notifyArrive_(orderId, guestNo){
  const {U,D,o,g, vehMap, drvMap} = _orderCtx_(orderId);
  const row = g.find(x=>+x.guestNo===+guestNo) || {};
  const text =
`${TG_ICONS.arrive} TIBA — Order ${orderId}
Jml Tamu: ${g.length}
Rute    : ${o.asal||''} → ${o.tujuan||''}
Aktual  : ${_fmtShort(row.arriveAt || new Date().toISOString())}

Tamu (alokasi):
${_listGuestsAlloc_(g, vehMap, drvMap)}`;

  _tgToRoles_(U, ['master','admin'], text);
  _tgToPemesan_(U, o, text);
  _tgToRoles_(U, ['cashier'], text);

  if(row.driverId) _tgToDriverId_(U, D, row.driverId, text);
}

// 5) REJECT → master/admin + pemesan
function notifyReject_(orderId, reason){
  const {U,o,g} = _orderCtx_(orderId);
  const text =
`${TG_ICONS.reject} ORDER DITOLAK ${orderId}
Pemesan : ${o.pemesanNama||'-'} (${o.pemesanUnit||'-'})
Jml Tamu: ${g.length}
Agenda  : ${o.agenda||'-'}
Alasan  : ${reason||'-'}`;
  _tgToRoles_(U, ['master','admin'], text);
  _tgToPemesan_(U, o, text);
}

// 6) HAPUS TAMU → master/admin + pemesan
function notifyDeleteGuest_(orderId, guestNo, reason){
  const {U,o,g} = _orderCtx_(orderId);
  const row = g.find(x=>+x.guestNo===+guestNo) || {};
  const text =
`${TG_ICONS.delete} TAMU DIHAPUS — Order ${orderId}
Tamu    : ${row.nama||'-'} (WA ${row.wa||'-'})
Agenda  : ${o.agenda||'-'}
Alasan  : ${reason||'-'}`;
  _tgToRoles_(U, ['master','admin'], text);
  _tgToPemesan_(U, o, text);
}

function telegram_(text, chatId){
  const cfg   = getConfig({});
  const token = String(cfg.tgBot || '').trim();
  const to    = String(chatId == null ? (cfg.tgAdmin || '') : chatId).trim();

  if (!token || !to) {
    log_({actor:'system'}, 'telegram_skip', { reason: !token ? 'no_token' : 'no_chat', text });
    return;
  }

  const url = `https://api.telegram.org/bot${token}/sendMessage`;
  const resp = UrlFetchApp.fetch(url, {
    method: 'post',
    payload: { chat_id: to, text: text },
    muteHttpExceptions: true
  });

  const code = resp.getResponseCode();
  const body = resp.getContentText();
  try {
    const j = JSON.parse(body);
    log_({actor:'system'}, 'telegram_result', { to, code, ok: j.ok === true, desc: j.description || '' });
  } catch(e) {
    log_({actor:'system'}, 'telegram_http', { to, code, body });
  }
}

function testTelegramAdmin_(){
  telegram_('✅ Test ke tgAdmin (Config.tgAdmin)', null);
  return 'OK';
}
function testTelegramUser_(username){
  const u = rows_(SH(SHEETS.USERS)).find(x => x.username === username);
  if (!u) throw 'User tidak ditemukan';
  const cid = String(u.tgId || '').trim();
  if (!cid) throw 'tgId user kosong';
  telegram_(`✅ Test ke user ${username}`, cid);
  return 'OK';
}




/****************************************
 * ======= ORDER & PERSETUJUAN ==========
 ****************************************/
function createOrder(req){
  const o = req.order||{};
  const orderId = uid_();

  SH(SHEETS.ORD).appendRow([
    orderId,
    o.pemesan?.user||'',
    o.pemesan?.nama||'',
    o.pemesan?.unit||'',
    o.pemesan?.jabatan||'',
    o.asal||'', o.tujuan||'',
    o.berangkatISO||'', o.pulangISO||'',
    o.agenda||'',
    'pending'
  ]);

  const shOG = SH(SHEETS.OGU);
  (o.tamu||[]).forEach((g,i)=>{
    shOG.appendRow([orderId, i+1, g.nama||'', g.unit||'', g.jabatan||'', g.gender||'L', g.wa||'', '', '', '', '', '']);
  });

  // log pakai user dari token atau fallback pemesan
  log_(req, 'createOrder', { orderId });

  // Telegram – PUSAT NOTIF
  notifyOrderCreated_(orderId);

  // preselect kendaraan (opsional)
  if(o.preVehicleId){
    const og = rows_(shOG);
    og.filter(x=>x.orderId===orderId).forEach(x=>x.vehicleId=o.preVehicleId);
    writeRows_(shOG, og, ['orderId','guestNo','nama','unit','jabatan','gender','wa','vehicleId','driverId','approved','departAt','arriveAt']);
  }
  return true;
}

function listApprovals(){
  const ord = rows_(SH(SHEETS.ORD)).filter(o=>o.status==='pending' || o.status==='allocating');
  return ord.map(o=>{
    const jml = rows_(SH(SHEETS.OGU)).filter(g=>g.orderId===o.id).length;
    const berLabel = o.berangkatISO? fmtLong_(o.berangkatISO):'';
    const pulLabel = o.pulangISO? fmtLong_(o.pulangISO):'';
    return { id:o.id, pemesan:{nama:o.pemesanNama}, asal:o.asal, tujuan:o.tujuan, berangkatLabel:berLabel, pulangLabel:pulLabel, jml };
  });
}
function listAllocGuests(req){
  const o = rows_(SH(SHEETS.ORD)).find(x=>x.id===req.orderId); if(!o) throw 'Order tidak ada';
  const g = rows_(SH(SHEETS.OGU)).filter(x=>x.orderId===req.orderId);
  const info = `${o.pemesanNama} • ${o.asal} → ${o.tujuan} • ${fmtLong_(o.berangkatISO)}`;
  const guests = g.map(x=>({
    no:+x.guestNo, nama:x.nama, unit:x.unit, jabatan:x.jabatan,
    vehicleId:x.vehicleId||'', driverId:x.driverId||'',
    approved: x.approved==='TRUE'
  }));
  return { info, guests };
}
function allocGuest(req){
  const { orderId, guestNo, vehicleId, driverId } = req;
  const sh = SH(SHEETS.OGU); const rows = rows_(sh);
  const i = rows.findIndex(x=>x.orderId===orderId && +x.guestNo===+guestNo);
  if(i<0) throw 'Tamu tidak ada';

  rows[i].vehicleId = vehicleId||'';
  rows[i].driverId  = driverId||'';
  writeRows_(sh, rows, ['orderId','guestNo','nama','unit','jabatan','gender','wa','vehicleId','driverId','approved','departAt','arriveAt']);

  setOrderStatus_(orderId, 'allocating');
  log_(req,'allocGuest',{orderId,guestNo,vehicleId,driverId});

  if(vehicleId) setVehicleStatus_(vehicleId,'allocated');
  return true;
}
function approveGuest(req){
  const { orderId, guestNo } = req;
  const shOG = SH(SHEETS.OGU);
  const all  = rows_(shOG);

  const i = all.findIndex(x => x.orderId === orderId && +x.guestNo === +guestNo);
  if (i < 0) throw 'Tamu tidak ada';
  if (!all[i].vehicleId || !all[i].driverId) throw 'Alokasikan kendaraan & driver dulu';

  all[i].approved = 'TRUE';
  writeRows_(shOG, all, ['orderId','guestNo','nama','unit','jabatan','gender','wa','vehicleId','driverId','approved','departAt','arriveAt']);

  // Telegram – ringkasan approval hanya untuk tamu ini
  notifyApprovedGuests_(orderId, [guestNo]);

  log_(req,'admin','approveGuest',{orderId,guestNo});

  const stillPending = all.some(r => r.orderId === orderId && r.approved !== 'TRUE');
  if (!stillPending) setOrderStatus_(orderId, 'approved');
  return true;
}
function approveAll(req){
  const { orderId } = req;

  const shOG = SH(SHEETS.OGU);
  const all  = rows_(shOG);
  const targets = all.filter(r => r.orderId === orderId);
  if (targets.length === 0) throw 'Order tidak memiliki tamu';

  const notAllocated = targets.filter(r => !(r.vehicleId && r.driverId));
  if (notAllocated.length) throw 'Alokasikan kendaraan & driver untuk semua tamu terlebih dahulu.';

  let changed = 0;
  targets.forEach(r => { if (r.approved !== 'TRUE') { r.approved = 'TRUE'; changed++; } });

  writeRows_(shOG, all, ['orderId','guestNo','nama','unit','jabatan','gender','wa','vehicleId','driverId','approved','departAt','arriveAt']);
  setOrderStatus_(orderId, 'approved');

  // Telegram – ringkasan approval untuk SEMUA tamu order ini
  notifyApprovedGuests_(orderId, null);

  log_(req,'admin', 'approveAll', { orderId, guests: targets.length, newlyApproved: changed });
  return true;
}
function rejectOrder(req){
  const { orderId, reason } = req;
  setOrderStatus_(orderId,'rejected');

  // Telegram – PUSAT NOTIF
  notifyReject_(orderId, reason);

  log_(req,'admin','rejectOrder',{orderId,reason});
  return true;
}
function deleteGuest(req){
  const { orderId, guestNo, reason } = req;
  const rows=rows_(SH(SHEETS.OGU)).filter(r=> !(r.orderId===orderId && +r.guestNo===+guestNo) );
  writeRows_(SH(SHEETS.OGU), rows, ['orderId','guestNo','nama','unit','jabatan','gender','wa','vehicleId','driverId','approved','departAt','arriveAt']);

  // Telegram – PUSAT NOTIF
  notifyDeleteGuest_(orderId, guestNo, reason);

  log_(req,'admin','deleteGuest',{orderId,guestNo,reason});
  return true;
}


/****************************************
 * ========== DRIVER (TUGAS) ============
 ****************************************/
function myTasks(req){
  // role dari token (jaga-jaga kalau kosong)
  var role = '';
  try{ role = parseToken_(req.token).role || ''; }catch(_){}

  var viewAll = (req && req.viewAll === true) ||
                ['admin','master','cashier'].includes(role);

  var drvRows = rows_(SH(SHEETS.DRV));
  var ogRows  = rows_(SH(SHEETS.OGU)).filter(function(x){ return x.approved === 'TRUE'; });
  var ordRows = rows_(SH(SHEETS.ORD));

  // Admin/Master/Cashier → lihat semua tugas (read-only)
  if (viewAll){
    return ogRows.map(function(x){
      var o = ordRows.find(function(k){ return k.id===x.orderId; }) || {};
      var d = drvRows.find(function(dv){ return dv.id===x.driverId; }) || {};
      return {
        orderId: x.orderId,
        guestNo: +x.guestNo,
        nama:    x.nama,
        asal:    o.asal, tujuan: o.tujuan, berangkatISO: o.berangkatISO,
        departAt: x.departAt || '', arriveAt: x.arriveAt || '',
        departAtLabel: x.departAt ? fmtShort_(x.departAt) : '',
        arriveAtLabel: x.arriveAt ? fmtShort_(x.arriveAt) : '',
        driverId: x.driverId || '', driverName: d.name || '',
        readonly: true
      };
    });
  }

  // Mode driver (tetap seperti semula – mapping username/nama/WA)
  var driverUser = (req && req.driverUser) || '';
  if (!driverUser) return [];

  function norm(s){ return (s||'').toString().trim().toLowerCase(); }
  function normalizePhone_(s){
    s = (s||'').toString().trim().replace(/[^\d]/g,'');
    if (s.indexOf('0')===0) s='62'+s.slice(1);
    return s;
  }
  var drv = drvRows.find(function(d){ return (d.userId||'') === driverUser; }) ||
            drvRows.find(function(d){ return norm(d.name) === norm(driverUser); }) ||
            drvRows.find(function(d){ return normalizePhone_(d.wa) === normalizePhone_(driverUser); }) || null;
  if (!drv) return [];

  var mine = ogRows.filter(function(x){ return x.driverId === drv.id; });
  return mine.map(function(x){
    var o = ordRows.find(function(k){ return k.id===x.orderId; }) || {};
    return {
      orderId:x.orderId, guestNo:+x.guestNo, nama:x.nama,
      asal:o.asal, tujuan:o.tujuan, berangkatISO:o.berangkatISO,
      departAt:x.departAt||'', arriveAt:x.arriveAt||'',
      departAtLabel: x.departAt? fmtShort_(x.departAt):'',
      arriveAtLabel: x.arriveAt? fmtShort_(x.arriveAt):'',
      readonly:false
    };
  });
}

function depart(req){
  const { orderId, guestNo }=req;
  const rows=rows_(SH(SHEETS.OGU));
  const i=rows.findIndex(r=>r.orderId===orderId && +r.guestNo===+guestNo);
  if(i<0) throw 'Tugas tidak ada';

  rows[i].departAt = nowISO_();
  writeRows_(SH(SHEETS.OGU), rows, ['orderId','guestNo','nama','unit','jabatan','gender','wa','vehicleId','driverId','approved','departAt','arriveAt']);

  // Telegram – PUSAT NOTIF
  notifyDepart_(orderId, guestNo);

  if(rows[i].vehicleId) setVehicleStatus_(rows[i].vehicleId,'on_trip');

  log_(req,'driver','depart',{orderId,guestNo});
  return true;
}
function arrive(req){
  const { orderId, guestNo }=req;
  const rows=rows_(SH(SHEETS.OGU));
  const i=rows.findIndex(r=>r.orderId===orderId && +r.guestNo===+guestNo);
  if(i<0) throw 'Tugas tidak ada';

  rows[i].arriveAt = nowISO_();
  writeRows_(SH(SHEETS.OGU), rows, ['orderId','guestNo','nama','unit','jabatan','gender','wa','vehicleId','driverId','approved','departAt','arriveAt']);

  // Telegram – PUSAT NOTIF
  notifyArrive_(orderId, guestNo);

  const stillOn = rows.filter(r=> r.vehicleId===rows[i].vehicleId && (!r.arriveAt) );
  if(stillOn.length===0 && rows[i].vehicleId) setVehicleStatus_(rows[i].vehicleId,'available');

  log_(req,'driver','arrive',{orderId,guestNo});
  return true;
}


/****************************************
 * ============== KASIR =================
 ****************************************/
function listCashierTasks(req){
  const og  = rows_(SH(SHEETS.OGU));
  const ord = rows_(SH(SHEETS.ORD));
  const drv = rows_(SH(SHEETS.DRV));
  const veh = rows_(SH(SHEETS.VEH));
  const tl  = rows_(SH(SHEETS.TL));

  const key = (o,d)=>`${o}__${d}`;
  const approved = og.filter(r => isTrue_(r.approved) && r.driverId);
  const groups = {};
  approved.forEach(r=>{
    const k = key(r.orderId, r.driverId);
    if(!groups[k]) groups[k] = { orderId:r.orderId, driverId:r.driverId, vehicleId:r.vehicleId, guests:[] };
    groups[k].guests.push({ guestNo:+r.guestNo, nama:r.nama, unit:r.unit||'', jabatan:r.jabatan||'' });
    if(r.vehicleId) groups[k].vehicleId = r.vehicleId;
  });

  // exclude yang sudah punya surat tugas
  Object.keys(groups).forEach(k=>{
    const g = groups[k];
    const hasLetter = tl.find(x=> x.orderId===g.orderId && x.driverId===g.driverId );
    if(hasLetter) delete groups[k];
  });

  return Object.values(groups).map(g=>{
    const o = ord.find(x=>x.id===g.orderId)||{};
    const d = drv.find(x=>x.id===g.driverId)||{};
    const v = veh.find(x=>x.id===g.vehicleId)||{};
    return {
      orderId: g.orderId,
      driverId: g.driverId,
      vehicleId: g.vehicleId||'',
      driverName: d.name||'',
      vehicleName: v.name||'',
      route: `${o.asal||''} → ${o.tujuan||''}`,
      berangkatISO: o.berangkatISO||'',
      guests: g.guests
    };
  });
}
function createTaskLetter(req){
  const { orderId, driverId, vehicleId, letterNo, advanceAmount, note } = req;
  if(!orderId || !driverId) throw 'orderId/driverId wajib';

  const id = uid_();
  SH(SHEETS.TL).appendRow([
    id, orderId, driverId, vehicleId||'',
    letterNo||'', nowISO_(), actor_(req),
    +advanceAmount||0, 0, 'open', note||''
  ]);

  if(+advanceAmount>0){
    SH(SHEETS.CASH).appendRow([ uid_(), id, 'advance', +advanceAmount, note||'', nowISO_(), actor_(req) ]);
  }

  log_(req,'createTaskLetter',{id, orderId, driverId, advance:+advanceAmount||0});
  return { id };
}
function settleTaskLetter(req){
  const { letterId, settleAmount, note } = req;
  const sh = SH(SHEETS.TL); const v = sh.getDataRange().getValues();
  let found=false, adv=0;

  for(let i=1;i<v.length;i++){
    if(v[i][0]===letterId){
      adv    = +v[i][7]||0;
      v[i][8]= +settleAmount||0;
      v[i][9]= 'settled';
      v[i][10]= v[i][10] ? (v[i][10] + ' | ' + (note||'')) : (note||'');
      found=true; break;
    }
  }
  if(!found) throw 'Surat tugas tidak ditemukan';

  sh.clearContents(); sh.getRange(1,1,v.length,v[0].length).setValues(v);
  SH(SHEETS.CASH).appendRow([ uid_(), letterId, 'settlement', +settleAmount||0, note||'', nowISO_(), actor_(req) ]);

  const diff = (+settleAmount||0) - adv;
  log_(req,'settleTaskLetter',{letterId, settle:+settleAmount||0, advance:adv, diff});
  return { diff };
}
function listCashierJournal(req){
  const from = req.fromISO ? new Date(req.fromISO) : new Date('1970-01-01');
  const to   = req.toISO   ? new Date(req.toISO)   : new Date('2999-12-31');

  const tl = rows_(SH(SHEETS.TL)).filter(x=>{
    const t = new Date(x.createdAt||new Date());
    return t>=from && t<=to;
  });

  const ord = rows_(SH(SHEETS.ORD));
  const drv = rows_(SH(SHEETS.DRV));
  const veh = rows_(SH(SHEETS.VEH));

  return tl.map(x=>{
    const o = ord.find(k=>k.id===x.orderId)||{};
    const d = drv.find(k=>k.id===x.driverId)||{};
    const v = veh.find(k=>k.id===x.vehicleId)||{};
    const diff = (+x.settleAmount||0) - (+x.advanceAmount||0);
    return {
      id:x.id, letterNo:x.letterNo||'',
      orderId:x.orderId, driverName:d.name||'', vehicleName:v.name||'',
      route:`${o.asal||''} → ${o.tujuan||''}`,
      createdAt:x.createdAt||'',
      advance:+x.advanceAmount||0, settle:+x.settleAmount||0, diff,
      status:x.status||'open', note:x.note||''
    };
  });
}

/****************************************
 * ======== LAPORAN & DASHBOARD =========
 ****************************************/
function journal(req){
  const from = new Date(req.fromISO), to = new Date(req.toISO);
  const ord = rows_(SH(SHEETS.ORD));
  const og  = rows_(SH(SHEETS.OGU));
  const veh = rows_(SH(SHEETS.VEH));
  const drv = rows_(SH(SHEETS.DRV));
  const out=[];
  og.forEach(g=>{
    const o = ord.find(x=>x.id===g.orderId)||{};
    const d1 = g.departAt ? new Date(g.departAt) : null;
    if(d1 && d1>=from && d1<=to){
      out.push({
        nama:g.nama, unit:g.unit, jabatan:g.jabatan, agenda:o.agenda||'',
        vehicleName: (veh.find(v=>v.id===g.vehicleId)||{}).name||'',
        driverName: (drv.find(d=>d.id===g.driverId)||{}).name||'',
        departAt: g.departAt||'', arriveAt: g.arriveAt||''
      });
    }
  });
  return out;
}
function dashboard(){
  const veh = rows_(SH(SHEETS.VEH));
  const og  = rows_(SH(SHEETS.OGU));
  const activeVehicles = veh.filter(v=>v.status!=='inactive' && v.status!=='maintenance').length;
  const onTripGuests   = og.filter(g=>g.departAt && !g.arriveAt).length;

  const map = {};
  og.filter(g=>g.arriveAt).forEach(g=>{ map[g.vehicleId]= (map[g.vehicleId]||0)+1; });
  const top = Object.entries(map).sort((a,b)=>b[1]-a[1]).slice(0,3).map(([vid,c])=>{
    const v = veh.find(x=>x.id===vid)||{}; return { name:v.name||'(Tanpa Nama)', count:c };
  });

  return { activeVehicles, onTripGuests, topVehicles: top };
}

/****************************************
 * ================ HELPER ==============
 ****************************************/
function setOrderStatus_(orderId, status){
  const sh=SH(SHEETS.ORD); const v=sh.getDataRange().getValues();
  for(let i=1;i<v.length;i++){ if(v[i][0]===orderId){ v[i][10]=status; break; } }
  sh.clearContents(); sh.getRange(1,1,v.length,v[0].length).setValues(v);
}
function setVehicleStatus_(id, status){
  const sh=SH(SHEETS.VEH); const v=sh.getDataRange().getValues();
  for(let i=1;i<v.length;i++){ if(v[i][0]===id){ v[i][6]=status; break; } }
  sh.clearContents(); sh.getRange(1,1,v.length,v[0].length).setValues(v);
}
function fmtLong_(iso){
  if(!iso) return '';
  const d=new Date(iso); const hari=['Minggu','Senin','Selasa','Rabu','Kamis','Jumat','Sabtu'][d.getDay()];
  const bln=['Jan','Feb','Mar','Apr','Mei','Jun','Jul','Agu','Sep','Okt','Nov','Des'][d.getMonth()];
  const pad=n=>n<10?'0'+n:n;
  return `${hari}, ${pad(d.getDate())} ${bln} ${d.getFullYear()} – ${pad(d.getHours())}:${pad(d.getMinutes())}`;
}
function fmtShort_(iso){
  const d=new Date(iso); const pad=n=>n<10?'0'+n:n;
  return `${pad(d.getDate())}/${pad(d.getMonth()+1)}/${d.getFullYear()} ${pad(d.getHours())}:${pad(d.getMinutes())}`;
}

function role_(req){
  try { return parseToken_(req.token).role || ''; }
  catch(e){ return ''; }
}

function isTrue_(v){
  if (v === true || v === 1) return true;
  if (typeof v === 'string') {
    var s = v.trim().toLowerCase();
    return s === 'true' || s === 'yes' || s === 'y' || s === '1' || s === 't' || s === 'ok';
  }
  return false;
}
